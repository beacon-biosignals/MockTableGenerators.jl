var documenterSearchIndex = {"docs":
[{"location":"","page":"API Documentation","title":"API Documentation","text":"CurrentModule = MockTableGenerators","category":"page"},{"location":"#MockTableGenerators.jl","page":"API Documentation","title":"MockTableGenerators.jl","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"This package provides an interface for composing the the generation of multiple dependent Tables.jl-compatible tables to produce realistic mock datasets.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"The interface is based around a TableGenerator abstract type and a set of associated methods that describe various properties of the tables and the relationships between them. Generators, i.e. instances of subtypes of TableGenerator, can then be organized into a directed acyclic graph (DAG) that defines the dependencies between generators.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Defining a generator is as simple as defining a subtype of TableGenerator and extending the functions table_key, num_rows, and emit!. Special row generators may also need to extend visit! for introducing state or dependency_key for multiple TableGenerator types which creating rows for the same table.","category":"page"},{"location":"#API","page":"API Documentation","title":"API","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"table_key\nnum_rows\nemit!\ndependency_key\nvisit!","category":"page"},{"location":"#MockTableGenerators.table_key","page":"API Documentation","title":"MockTableGenerators.table_key","text":"table_key(::TableGenerator) -> Symbol\n\nStates the name of the table associated with the subtype instance of TableGenerator. The defined name will be included in the DAG output to identify the row's table.\n\n\n\n\n\n","category":"function"},{"location":"#MockTableGenerators.num_rows","page":"API Documentation","title":"MockTableGenerators.num_rows","text":"num_rows(rng::AbstractRNG, g::TableGenerator, state=nothing) -> Int\nnum_rows(rng::AbstractRNG, g::TableGenerator) -> Int\n\nReturns the number of rows that should be produced for this DAG node visit. The number of rows can vary between DAG visits.\n\n\n\n\n\n","category":"function"},{"location":"#MockTableGenerators.emit!","page":"API Documentation","title":"MockTableGenerators.emit!","text":"emit(rng::AbstractRNG, g::TableGenerator, deps::Dict{Symbol,<:Any}, state=nothing)\nemit(rng::AbstractRNG, g::TableGenerator, deps::Dict{Symbol,<:Any})\n\nProduces a single row from the table generator. Dependent generators will be passed the contents of the rows they depend on via deps and indexed by the result of dependency_key. Any state returned from visit!(g, ...) will be passed into this function via state allowing row generation to be conditional on previous rows created by this generator.\n\n\n\n\n\n","category":"function"},{"location":"#MockTableGenerators.dependency_key","page":"API Documentation","title":"MockTableGenerators.dependency_key","text":"dependency_key(::TableGenerator) -> Symbol\n\nStates the key used in the dependency dictionary (deps) to uniquely identify this TableGenerator. When undefined dependency_key will fall back on calling table_key.\n\nSee also: emit!, table_key\n\n\n\n\n\n","category":"function"},{"location":"#MockTableGenerators.visit!","page":"API Documentation","title":"MockTableGenerators.visit!","text":"visit!(rng, g::TableGenerator, deps)\n\nFunction allows generates to update state each time the node is visited the the DAG. When a TableGenerator creates a batch of rows this function is only called once.\n\n\n\n\n\n","category":"function"},{"location":"#Example","page":"API Documentation","title":"Example","text":"","category":"section"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Say we want to define tables person, visit, and symptom, the rows of which describe people, their visits to a doctor's office, and the symptoms with which they presented at each visit, respectively.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"We'll start by describing the people. Each person will have a first name and last name and will be uniquely identified by a UUID.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"using MockTableGenerators, Dates, StableRNGs, UUIDs\n\nfirst_names = [\"Alice\", \"Bob\", \"Carol\", \"David\"]\nlast_names = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\"]\n\n# We'll use the `num` field here to provide bounds on the number of generated rows\nstruct PersonGenerator <: TableGenerator\n    num::UnitRange{Int}\nend\n\n# Rows of this table will be associated with the name `person` in the generated output\nMockTableGenerators.table_key(g::PersonGenerator) = :person\n\n# There will be a random number of rows within the bounds set by the generator type\nMockTableGenerators.num_rows(rng, g::PersonGenerator) = rand(rng, g.num)\n\n# Each row will have a `UUID` called `id` and a random pairing of first and last names\nfunction MockTableGenerators.emit!(rng, g::PersonGenerator, deps)\n    return (; id=uuid4(rng),\n            first_name=rand(rng, first_names),\n            last_name=rand(rng, last_names))\nend","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"With that setup, let's try generating just a table of exactly four people, ignoring visits and symptoms for now. To use the generator to generate rows, we'll simply pass it to generate. In this example, we'll use a StableRNG from the StableRNGs.jl package to reproducibly generate the rows. Note that providing a random number generator when calling generate is optional, but new methods like those shown above must allow one to be passed as the first argument.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"julia> rng = StableRNG(11);\n\njulia> MockTableGenerators.generate(rng, PersonGenerator(4:4))\nChannel{Any}(10) (closed)\n\njulia> collect(ans)\n4-element Vector{Any}:\n :person => (id = UUID(\"5a3d3d5e-ff13-417a-8b79-7c9e0c9cfb56\"), first_name = \"David\", last_name = \"Brown\")\n :person => (id = UUID(\"9231b8a2-2320-4ef4-a1ed-0719b3373395\"), first_name = \"Bob\", last_name = \"Williams\")\n :person => (id = UUID(\"80f3c3fb-afb7-44de-889d-0b95221178c2\"), first_name = \"Bob\", last_name = \"Brown\")\n :person => (id = UUID(\"19829759-e683-4d01-8481-cba1b28467d7\"), first_name = \"Alice\", last_name = \"Brown\")","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"The output of generate is a Channel that iterates table_key => row pairs.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Now let's add visits to the mix:","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"struct VisitGenerator <: TableGenerator\n    num::UnitRange{Int}\nend\n\nfunction MockTableGenerators.visit!(rng, g::VisitGenerator, deps)\n    n = rand(rng, g.num)\n    visits = sort!(rand(rng, Date(1970):Day(1):Date(2000), n))\n    return Dict(:i => 1, :visits => visits, :n => n)\nend\n\nMockTableGenerators.table_key(g::VisitGenerator) = :visit\n\nMockTableGenerators.num_rows(rng, g::VisitGenerator, state) = state[:n]\n\nfunction MockTableGenerators.emit!(rng, g::VisitGenerator, deps, state)\n    visit = popfirst!(state[:visits])\n    row = (; id=uuid4(rng), person_id=deps[:person].id, index=state[:i], date=visit)\n    state[:i] += 1\n    return row\nend","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"And symptoms:","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"light_symptoms = [\"Fever\", \"Chills\", \"Fatigue\", \"Runny nose\", \"Cough\"]\nsevere_symptoms = [\"Weakness\", \"Muscle Loss\", \"Fainting\"]\n\nstruct SymptomGenerator <: TableGenerator\n    num::UnitRange{Int}\nend\n\nfunction MockTableGenerators.visit!(rng, g::SymptomGenerator, deps)\n    # Number of symptoms increase, on average, with number of visits\n    n = rand(rng, min(deps[:visit].index, last(g.num)):last(g.num))\n    return (; n)\nend\n\nMockTableGenerators.table_key(g::SymptomGenerator) = :symptom\nMockTableGenerators.num_rows(rng, g::SymptomGenerator, state) = state.n\n\nfunction MockTableGenerators.emit!(rng, g::SymptomGenerator, deps, state)\n    # Conditional generation based upon number of visits\n    symptoms = deps[:visit].index > 2 ? severe_symptoms : light_symptoms\n    return (; visit_id=deps[:visit].id, symptom=rand(rng, symptoms))\nend","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"In this case, our DAG looks like a straight shot from persons to visits to symptoms. We'll generate rows for 3 to 5 people, each with 1 to 4 visits, at which they had 1 or 2 symptoms.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"julia> dag = [PersonGenerator(3:5) => [VisitGenerator(1:4) => [SymptomGenerator(1:2)]]];\n\njulia> results = collect(MockTableGenerators.generate(dag))\n45-element Vector{Any}:\n  :person => (id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), first_name = \"Bob\", last_name = \"Williams\")\n   :visit => (id = UUID(\"cea4339d-325a-41f8-9a5e-fd02323591ba\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 1, date = Date(\"1974-06-02\"))\n :symptom => (visit_id = UUID(\"cea4339d-325a-41f8-9a5e-fd02323591ba\"), symptom = \"Fever\")\n :symptom => (visit_id = UUID(\"cea4339d-325a-41f8-9a5e-fd02323591ba\"), symptom = \"Runny nose\")\n   :visit => (id = UUID(\"d54d21b0-59d0-4595-882f-c7bc0fc7bde4\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 2, date = Date(\"1982-08-04\"))\n :symptom => (visit_id = UUID(\"d54d21b0-59d0-4595-882f-c7bc0fc7bde4\"), symptom = \"Fatigue\")\n :symptom => (visit_id = UUID(\"d54d21b0-59d0-4595-882f-c7bc0fc7bde4\"), symptom = \"Chills\")\n   :visit => (id = UUID(\"77139cf8-6bdc-43a1-96dd-be3f8d850b30\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 3, date = Date(\"1985-01-10\"))\n :symptom => (visit_id = UUID(\"77139cf8-6bdc-43a1-96dd-be3f8d850b30\"), symptom = \"Muscle Loss\")\n :symptom => (visit_id = UUID(\"77139cf8-6bdc-43a1-96dd-be3f8d850b30\"), symptom = \"Weakness\")\n   :visit => (id = UUID(\"c707dbd5-519a-4948-bdb2-57225970ef9a\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 4, date = Date(\"1994-10-02\"))\n :symptom => (visit_id = UUID(\"c707dbd5-519a-4948-bdb2-57225970ef9a\"), symptom = \"Fainting\")\n :symptom => (visit_id = UUID(\"c707dbd5-519a-4948-bdb2-57225970ef9a\"), symptom = \"Muscle Loss\")\n  :person => (id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), first_name = \"Bob\", last_name = \"Brown\")\n   :visit => (id = UUID(\"443b40e3-a6a2-40bc-8f66-71f5c22da685\"), person_id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), index = 1, date = Date(\"1972-06-30\"))\n :symptom => (visit_id = UUID(\"443b40e3-a6a2-40bc-8f66-71f5c22da685\"), symptom = \"Fatigue\")\n   :visit => (id = UUID(\"cae1ad18-40b5-4eec-91ec-52b65d8c346f\"), person_id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), index = 2, date = Date(\"1989-04-23\"))\n :symptom => (visit_id = UUID(\"cae1ad18-40b5-4eec-91ec-52b65d8c346f\"), symptom = \"Fatigue\")\n :symptom => (visit_id = UUID(\"cae1ad18-40b5-4eec-91ec-52b65d8c346f\"), symptom = \"Chills\")\n   :visit => (id = UUID(\"11d23dc3-63c5-48d2-890d-2623d5a48261\"), person_id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), index = 3, date = Date(\"1991-09-07\"))\n :symptom => (visit_id = UUID(\"11d23dc3-63c5-48d2-890d-2623d5a48261\"), symptom = \"Muscle Loss\")\n :symptom => (visit_id = UUID(\"11d23dc3-63c5-48d2-890d-2623d5a48261\"), symptom = \"Fainting\")\n  :person => (id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), first_name = \"Bob\", last_name = \"Brown\")\n   :visit => (id = UUID(\"98a05704-62fa-4a30-b41b-95a765c963af\"), person_id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), index = 1, date = Date(\"1973-09-05\"))\n :symptom => (visit_id = UUID(\"98a05704-62fa-4a30-b41b-95a765c963af\"), symptom = \"Fever\")\n :symptom => (visit_id = UUID(\"98a05704-62fa-4a30-b41b-95a765c963af\"), symptom = \"Fatigue\")\n   :visit => (id = UUID(\"d05f883e-68f7-46fc-a106-042f10749bf3\"), person_id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), index = 2, date = Date(\"1998-12-11\"))\n :symptom => (visit_id = UUID(\"d05f883e-68f7-46fc-a106-042f10749bf3\"), symptom = \"Runny nose\")\n :symptom => (visit_id = UUID(\"d05f883e-68f7-46fc-a106-042f10749bf3\"), symptom = \"Fever\")\n   :visit => (id = UUID(\"fc6a14a5-49f3-4746-b22d-f451e1dc4507\"), person_id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), index = 3, date = Date(\"1999-05-10\"))\n :symptom => (visit_id = UUID(\"fc6a14a5-49f3-4746-b22d-f451e1dc4507\"), symptom = \"Weakness\")\n :symptom => (visit_id = UUID(\"fc6a14a5-49f3-4746-b22d-f451e1dc4507\"), symptom = \"Fainting\")\n  :person => (id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), first_name = \"Carol\", last_name = \"Smith\")\n   :visit => (id = UUID(\"e9dc403e-443b-4b15-8894-fc399967b1e5\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 1, date = Date(\"1973-06-13\"))\n :symptom => (visit_id = UUID(\"e9dc403e-443b-4b15-8894-fc399967b1e5\"), symptom = \"Runny nose\")\n :symptom => (visit_id = UUID(\"e9dc403e-443b-4b15-8894-fc399967b1e5\"), symptom = \"Runny nose\")\n   :visit => (id = UUID(\"84cd20d4-8836-464f-a76c-52ec80b9c022\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 2, date = Date(\"1980-07-05\"))\n :symptom => (visit_id = UUID(\"84cd20d4-8836-464f-a76c-52ec80b9c022\"), symptom = \"Fever\")\n :symptom => (visit_id = UUID(\"84cd20d4-8836-464f-a76c-52ec80b9c022\"), symptom = \"Cough\")\n   :visit => (id = UUID(\"49ad303b-db4a-4000-9376-c11580e22d4a\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 3, date = Date(\"1981-02-15\"))\n :symptom => (visit_id = UUID(\"49ad303b-db4a-4000-9376-c11580e22d4a\"), symptom = \"Weakness\")\n :symptom => (visit_id = UUID(\"49ad303b-db4a-4000-9376-c11580e22d4a\"), symptom = \"Weakness\")\n   :visit => (id = UUID(\"6e3a09c8-8cbd-4dd5-82ef-ba1d54c43e11\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 4, date = Date(\"1998-03-24\"))\n :symptom => (visit_id = UUID(\"6e3a09c8-8cbd-4dd5-82ef-ba1d54c43e11\"), symptom = \"Fainting\")\n :symptom => (visit_id = UUID(\"6e3a09c8-8cbd-4dd5-82ef-ba1d54c43e11\"), symptom = \"Muscle Loss\")","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"We can also separate these into individual tables. This can be done after generating rows by calling collect_tables, or tables can be generated directly using generate_tables in place of generate. The following example shows the former to organize the rows generated above.","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"julia> tables = MockTableGenerators.collect_tables(results);\n\njulia> tables.person\n4-element Vector{@NamedTuple{id::UUID, first_name::String, last_name::String}}:\n (id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), first_name = \"Bob\", last_name = \"Williams\")\n (id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), first_name = \"Bob\", last_name = \"Brown\")\n (id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), first_name = \"Bob\", last_name = \"Brown\")\n (id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), first_name = \"Carol\", last_name = \"Smith\")\n\njulia> tables.visit\n14-element Vector{@NamedTuple{id::UUID, person_id::UUID, index::Int64, date::Date}}:\n (id = UUID(\"cea4339d-325a-41f8-9a5e-fd02323591ba\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 1, date = Date(\"1974-06-02\"))\n (id = UUID(\"d54d21b0-59d0-4595-882f-c7bc0fc7bde4\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 2, date = Date(\"1982-08-04\"))\n (id = UUID(\"77139cf8-6bdc-43a1-96dd-be3f8d850b30\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 3, date = Date(\"1985-01-10\"))\n (id = UUID(\"c707dbd5-519a-4948-bdb2-57225970ef9a\"), person_id = UUID(\"34cdf816-7ac5-4e9d-8ef1-1957242d4496\"), index = 4, date = Date(\"1994-10-02\"))\n (id = UUID(\"443b40e3-a6a2-40bc-8f66-71f5c22da685\"), person_id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), index = 1, date = Date(\"1972-06-30\"))\n (id = UUID(\"cae1ad18-40b5-4eec-91ec-52b65d8c346f\"), person_id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), index = 2, date = Date(\"1989-04-23\"))\n (id = UUID(\"11d23dc3-63c5-48d2-890d-2623d5a48261\"), person_id = UUID(\"1dbe6a94-f238-481c-8137-c5a06272c93f\"), index = 3, date = Date(\"1991-09-07\"))\n (id = UUID(\"98a05704-62fa-4a30-b41b-95a765c963af\"), person_id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), index = 1, date = Date(\"1973-09-05\"))\n (id = UUID(\"d05f883e-68f7-46fc-a106-042f10749bf3\"), person_id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), index = 2, date = Date(\"1998-12-11\"))\n (id = UUID(\"fc6a14a5-49f3-4746-b22d-f451e1dc4507\"), person_id = UUID(\"8bdfb2a4-d99b-4a77-85e4-1e1ce3461aaa\"), index = 3, date = Date(\"1999-05-10\"))\n (id = UUID(\"e9dc403e-443b-4b15-8894-fc399967b1e5\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 1, date = Date(\"1973-06-13\"))\n (id = UUID(\"84cd20d4-8836-464f-a76c-52ec80b9c022\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 2, date = Date(\"1980-07-05\"))\n (id = UUID(\"49ad303b-db4a-4000-9376-c11580e22d4a\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 3, date = Date(\"1981-02-15\"))\n (id = UUID(\"6e3a09c8-8cbd-4dd5-82ef-ba1d54c43e11\"), person_id = UUID(\"4c372d3e-1b44-4818-84d7-1268a624d4aa\"), index = 4, date = Date(\"1998-03-24\"))\n\njulia> tables.symptom\n27-element Vector{@NamedTuple{visit_id::UUID, symptom::String}}:\n (visit_id = UUID(\"cea4339d-325a-41f8-9a5e-fd02323591ba\"), symptom = \"Fever\")\n (visit_id = UUID(\"cea4339d-325a-41f8-9a5e-fd02323591ba\"), symptom = \"Runny nose\")\n (visit_id = UUID(\"d54d21b0-59d0-4595-882f-c7bc0fc7bde4\"), symptom = \"Fatigue\")\n (visit_id = UUID(\"d54d21b0-59d0-4595-882f-c7bc0fc7bde4\"), symptom = \"Chills\")\n (visit_id = UUID(\"77139cf8-6bdc-43a1-96dd-be3f8d850b30\"), symptom = \"Muscle Loss\")\n (visit_id = UUID(\"77139cf8-6bdc-43a1-96dd-be3f8d850b30\"), symptom = \"Weakness\")\n (visit_id = UUID(\"c707dbd5-519a-4948-bdb2-57225970ef9a\"), symptom = \"Fainting\")\n (visit_id = UUID(\"c707dbd5-519a-4948-bdb2-57225970ef9a\"), symptom = \"Muscle Loss\")\n (visit_id = UUID(\"443b40e3-a6a2-40bc-8f66-71f5c22da685\"), symptom = \"Fatigue\")\n (visit_id = UUID(\"cae1ad18-40b5-4eec-91ec-52b65d8c346f\"), symptom = \"Fatigue\")\n (visit_id = UUID(\"cae1ad18-40b5-4eec-91ec-52b65d8c346f\"), symptom = \"Chills\")\n (visit_id = UUID(\"11d23dc3-63c5-48d2-890d-2623d5a48261\"), symptom = \"Muscle Loss\")\n (visit_id = UUID(\"11d23dc3-63c5-48d2-890d-2623d5a48261\"), symptom = \"Fainting\")\n (visit_id = UUID(\"98a05704-62fa-4a30-b41b-95a765c963af\"), symptom = \"Fever\")\n (visit_id = UUID(\"98a05704-62fa-4a30-b41b-95a765c963af\"), symptom = \"Fatigue\")\n (visit_id = UUID(\"d05f883e-68f7-46fc-a106-042f10749bf3\"), symptom = \"Runny nose\")\n (visit_id = UUID(\"d05f883e-68f7-46fc-a106-042f10749bf3\"), symptom = \"Fever\")\n (visit_id = UUID(\"fc6a14a5-49f3-4746-b22d-f451e1dc4507\"), symptom = \"Weakness\")\n (visit_id = UUID(\"fc6a14a5-49f3-4746-b22d-f451e1dc4507\"), symptom = \"Fainting\")\n (visit_id = UUID(\"e9dc403e-443b-4b15-8894-fc399967b1e5\"), symptom = \"Runny nose\")\n (visit_id = UUID(\"e9dc403e-443b-4b15-8894-fc399967b1e5\"), symptom = \"Runny nose\")\n (visit_id = UUID(\"84cd20d4-8836-464f-a76c-52ec80b9c022\"), symptom = \"Fever\")\n (visit_id = UUID(\"84cd20d4-8836-464f-a76c-52ec80b9c022\"), symptom = \"Cough\")\n (visit_id = UUID(\"49ad303b-db4a-4000-9376-c11580e22d4a\"), symptom = \"Weakness\")\n (visit_id = UUID(\"49ad303b-db4a-4000-9376-c11580e22d4a\"), symptom = \"Weakness\")\n (visit_id = UUID(\"6e3a09c8-8cbd-4dd5-82ef-ba1d54c43e11\"), symptom = \"Fainting\")\n (visit_id = UUID(\"6e3a09c8-8cbd-4dd5-82ef-ba1d54c43e11\"), symptom = \"Muscle Loss\")","category":"page"},{"location":"","page":"API Documentation","title":"API Documentation","text":"Each of the tables created via collect_tables (or generate_tables) is compliant with the Tables.jl interface and, in Tables.jl parlance, is a \"row table,\" i.e. an iterable collection of rows with a common schema.","category":"page"}]
}
